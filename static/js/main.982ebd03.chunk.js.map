{"version":3,"sources":["Chart.js","utils.js","ChartComponent.js","App.js","reportWebVitals.js","index.js"],"names":["CandleStickChart","props","type","width","data","ratio","xAccessor","d","date","xExtents","last","length","yGrid","innerTickSize","tickStrokeDasharray","tickStrokeOpacity","tickStrokeWidth","xGrid","height","margin","left","right","top","bottom","seriesName","xScale","scaleTime","id","yExtents","high","low","axisAt","orient","ticks","timeIntervalBarWidth","utcDay","MouseCoordinateX","at","displayFormat","timeFormat","MouseCoordinateY","format","fitWidth","parseDate","timeParse","ChartComponent","useState","setData","useEffect","fetch","then","response","text","tsvParse","parse","open","close","volume","res","console","log","Chart","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAaIA,EAAmB,SAACC,GACvB,IAAQC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MACrBC,EAAY,SAAAC,GAAC,OAAIA,EAAEC,MACnBC,EAAW,CAChBH,EAAUI,eAAKN,IACfE,EAAUF,EAAKA,EAAKO,OAAS,OAUzBC,EAAmB,CACrBC,eAAgB,GAJFV,EAFI,GAAW,IAO7BW,oBAAqB,QACrBC,kBAAmB,GACnBC,gBAAiB,GAEfC,EAAmB,CACrBJ,eAAgB,GAdH,IAEwB,GAAY,IAajDC,oBAAqB,QACrBC,kBAAmB,GACnBC,gBAAiB,GAGpB,OACC,cAAC,IAAD,CAAaE,OAAQ,IAClBb,MAAOA,EACPF,MAAOA,EACPgB,OAAQ,CAAEC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAChDrB,KAAMA,EACNsB,WAAW,OACXpB,KAAMA,EACNE,UAAWA,EACXmB,OAAQC,cACRjB,SAAUA,EATb,SAWC,eAAC,IAAD,CAAOkB,GAAI,EAAGC,SAAU,SAAArB,GAAC,MAAI,CAACA,EAAEsB,KAAMtB,EAAEuB,MAAxC,UACC,cAAC,QAAD,aAAOC,OAAO,SAASC,OAAO,SAASC,MAAO,IAAQhB,IACtD,cAAC,QAAD,aAAOc,OAAO,OAAOC,OAAO,OAAOC,MAAO,GAAOrB,IACjD,cAAC,oBAAD,CAAmBT,MAAO+B,+BAAqBC,OAC3C,cAACC,EAAA,EAAD,CACIC,GAAG,SACHL,OAAO,SACPM,cAAeC,YAAW,cAC9B,cAACC,EAAA,EAAD,CACIH,GAAG,QACHL,OAAO,QACPM,cAAeG,YAAO,eASnBzC,EAFfA,EAAmB0C,mBAAS1C,G,SCvD5B,IAAM2C,EAAYC,YAAU,YCV5B,IAiBeC,EAjBQ,WACrB,MAAwBC,qBAAxB,mBAAO1C,EAAP,KAAa2C,EAAb,KAUA,OARAC,qBAAU,WDUSC,MAAM,2EACxBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9C,GAAI,OAAIiD,YAASjD,GAlBNkD,EAkBsBX,EAjBjC,SAASpC,GAQf,OAPAA,EAAEC,KAAO8C,EAAM/C,EAAEC,MACjBD,EAAEgD,MAAQhD,EAAEgD,KACZhD,EAAEsB,MAAQtB,EAAEsB,KACZtB,EAAEuB,KAAOvB,EAAEuB,IACXvB,EAAEiD,OAASjD,EAAEiD,MACbjD,EAAEkD,QAAUlD,EAAEkD,OAEPlD,KATT,IAAmB+C,KCOLJ,MAAK,SAAAQ,GACbC,QAAQC,IAAIF,GACZX,EAAQW,SAKRtD,EAEF,cAACyD,EAAD,CAAOzD,KAAMA,IAFE,+CCNJ0D,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.982ebd03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { scaleTime } from \"d3-scale\";\r\nimport { format } from \"d3-format\";\r\nimport { timeFormat } from \"d3-time-format\";\r\nimport { utcDay } from \"d3-time\";\r\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\r\nimport { CandlestickSeries } from \"react-stockcharts/lib/series\";\r\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\r\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\r\nimport { last, timeIntervalBarWidth } from \"react-stockcharts/lib/utils\";\r\nimport { MouseCoordinateX, MouseCoordinateY } from \"@react-financial-charts/coordinates\";\r\nimport BarSeries from \"react-stockcharts/lib/series/BarSeries\";\r\n\r\nlet CandleStickChart = (props) => {\r\n\tconst { type, width, data, ratio } = props;\r\n\tconst xAccessor = d => d.date;\r\n\tconst xExtents = [\r\n\t\txAccessor(last(data)),\r\n\t\txAccessor(data[data.length - 100])\r\n\t];\r\n\r\n  const height = 800;\r\n\r\n  var margin = {left: 70, right: 70, top:20, bottom: 30};\r\n  var gridHeight = height - margin.top - margin.bottom;\r\n  var gridWidth = width - margin.left - margin.right;\r\n\r\n  var showGrid = true;\r\n  var yGrid = showGrid ? { \r\n    innerTickSize: -1 * gridWidth,\r\n    tickStrokeDasharray: 'Solid',\r\n    tickStrokeOpacity: 0.2,\r\n    tickStrokeWidth: 1\r\n  } : {};\r\n  var xGrid = showGrid ? { \r\n    innerTickSize: -1 * gridHeight,\r\n    tickStrokeDasharray: 'Solid',\r\n    tickStrokeOpacity: 0.2,\r\n    tickStrokeWidth: 1\r\n  } : {};\r\n\r\n\treturn (\r\n\t\t<ChartCanvas height={800}\r\n\t\t\t\t\tratio={ratio}\r\n\t\t\t\t\twidth={width}\r\n\t\t\t\t\tmargin={{ left: 50, right: 50, top: 10, bottom: 30 }}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\tseriesName=\"MSFT\"\r\n\t\t\t\t\tdata={data}\r\n\t\t\t\t\txAccessor={xAccessor}\r\n\t\t\t\t\txScale={scaleTime()}\r\n\t\t\t\t\txExtents={xExtents}>\r\n\r\n\t\t\t<Chart id={1} yExtents={d => [d.high, d.low]}>\r\n\t\t\t\t<XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={23} {...xGrid} />\r\n\t\t\t\t<YAxis axisAt=\"left\" orient=\"left\" ticks={5} {...yGrid} />\r\n\t\t\t\t<CandlestickSeries width={timeIntervalBarWidth(utcDay)}/>\r\n        <MouseCoordinateX\r\n            at=\"bottom\"\r\n            orient=\"bottom\"\r\n            displayFormat={timeFormat(\"%Y-%m-%d\")} />\r\n        <MouseCoordinateY\r\n            at=\"right\"\r\n            orient=\"right\"\r\n            displayFormat={format(\".2f\")} \r\n        />\r\n\t\t\t</Chart>\r\n\t\t</ChartCanvas>\r\n\t);\r\n}\r\n\r\nCandleStickChart = fitWidth(CandleStickChart);\r\n\r\nexport default CandleStickChart;\r\n","import { tsvParse, csvParse } from  \"d3-dsv\";\r\nimport { timeParse } from \"d3-time-format\";\r\n\r\nfunction parseData(parse) {\r\n\treturn function(d) {\r\n\t\td.date = parse(d.date);\r\n\t\td.open = +d.open;\r\n\t\td.high = +d.high;\r\n\t\td.low = +d.low;\r\n\t\td.close = +d.close;\r\n\t\td.volume = +d.volume;\r\n\r\n\t\treturn d;\r\n\t};\r\n}\r\n\r\nconst parseDate = timeParse(\"%Y-%m-%d\");\r\n\r\nexport function getData() {\r\n\tconst promiseMSFT = fetch(\"https://cdn.rawgit.com/rrag/react-stockcharts/master/docs/data/MSFT.tsv\")\r\n\t\t.then(response => response.text())\r\n\t\t.then(data => tsvParse(data, parseData(parseDate)))\r\n\treturn promiseMSFT;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Chart from './Chart';\r\nimport { getData } from \"./utils\"\r\n\r\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\r\n\r\nconst ChartComponent = () => {\r\n  const [data, setData] = useState()\r\n\r\n  useEffect(() => {\r\n    getData().then(res => {\r\n      console.log(res)\r\n      setData(res)\r\n    })\r\n    \r\n  })\r\n\r\n  if(!data) return <div>Loading... </div>\r\n  return(\r\n    <Chart data={data} />\r\n  )\r\n}\r\n\r\nexport default ChartComponent","import './App.css';\nimport ChartComponent from './ChartComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChartComponent />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}